/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
    {
        ListNode* sum = new ListNode();
        ListNode* sol = sum;
        
        while (l1 && l2)
        {
            if (l1->val + l2->val + sum->val <= 9)
            {
                sum->val = l1->val + l2->val + sum->val;
                if (l1->next || l2->next)
                {
                    sum->next = new ListNode();
                }
            }
            else
            {
                sum->val = (l1->val + l2->val + sum->val) - 10;
                sum->next = new ListNode(1);
            }

            sum = sum->next;
            l1 = l1->next;
            l2 = l2->next;
        }
        
        while (l1)
        {
            if (l1->val + sum->val <= 9)
            {
                sum->val = l1->val + sum->val;
                
                if (l1->next)
                    sum->next = new ListNode();
            }
            else
            {
                sum->val = (l1->val + sum->val) - 10;
                sum->next = new ListNode(1);
            }
            sum = sum->next;
            l1 = l1->next;
        }
        
        while (l2)
        {
            if (l2->val + sum->val <= 9)
            {
                sum->val = l2->val + sum->val;
                
                if (l2->next)
                    sum->next = new ListNode();
            }
            else
            {
                sum->val = (l2->val + sum->val) - 10;
                sum->next = new ListNode(1);
            }
            sum = sum->next;
            l2 = l2->next;
        }
        
        return sol;
        
    }
};
